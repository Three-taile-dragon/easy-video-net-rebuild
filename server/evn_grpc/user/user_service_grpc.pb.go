// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: user_service.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetCaptcha(ctx context.Context, in *CaptchaRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	Forget(ctx context.Context, in *ForgetRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	TokenVerify(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenVerifyResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	GetSpaceIndividual(ctx context.Context, in *SpaceIndividualRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetReleaseInformation(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetAttentionList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetVermicelliList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetUserInfo(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	SetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*CommonBoolResponse, error)
	DetermineNameExists(ctx context.Context, in *DetermineNameExistsRequest, opts ...grpc.CallOption) (*CommonBoolResponse, error)
	UpdateAvatar(ctx context.Context, in *UpdateAvatarRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetLiveData(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*LiveDataResponse, error)
	SaveLiveData(ctx context.Context, in *SaveLiveDataRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	SendEmailVerificationCodeByChangePassword(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	Attention(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	CreateFavorites(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetFavoritesList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	DeleteFavorites(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	FavoriteVideo(ctx context.Context, in *FavoriteVideoRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetFavoritesListByFavoriteVideo(ctx context.Context, in *FavoritesListRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetFavoriteVideoList(ctx context.Context, in *FavoriteVideoListRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetRecordList(ctx context.Context, in *GetRecordListRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	ClearRecord(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	DeleteRecordByID(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetNoticeList(ctx context.Context, in *GetNoticeListRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetChatList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetChatHistoryMsg(ctx context.Context, in *GetChatHistoryMsgRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	PersonalLetter(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	DeleteChatItem(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetCaptcha(ctx context.Context, in *CaptchaRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Forget(ctx context.Context, in *ForgetRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/Forget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) TokenVerify(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenVerifyResponse, error) {
	out := new(TokenVerifyResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/TokenVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSpaceIndividual(ctx context.Context, in *SpaceIndividualRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetSpaceIndividual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetReleaseInformation(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetReleaseInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAttentionList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetAttentionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetVermicelliList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetVermicelliList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*CommonBoolResponse, error) {
	out := new(CommonBoolResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/SetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DetermineNameExists(ctx context.Context, in *DetermineNameExistsRequest, opts ...grpc.CallOption) (*CommonBoolResponse, error) {
	out := new(CommonBoolResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/DetermineNameExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateAvatar(ctx context.Context, in *UpdateAvatarRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/UpdateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetLiveData(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*LiveDataResponse, error) {
	out := new(LiveDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetLiveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SaveLiveData(ctx context.Context, in *SaveLiveDataRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/SaveLiveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendEmailVerificationCodeByChangePassword(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/SendEmailVerificationCodeByChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Attention(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/Attention", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateFavorites(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/CreateFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFavoritesList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetFavoritesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteFavorites(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/DeleteFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FavoriteVideo(ctx context.Context, in *FavoriteVideoRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/FavoriteVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFavoritesListByFavoriteVideo(ctx context.Context, in *FavoritesListRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetFavoritesListByFavoriteVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFavoriteVideoList(ctx context.Context, in *FavoriteVideoListRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetFavoriteVideoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRecordList(ctx context.Context, in *GetRecordListRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ClearRecord(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/ClearRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteRecordByID(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/DeleteRecordByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetNoticeList(ctx context.Context, in *GetNoticeListRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetNoticeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetChatList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetChatList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetChatHistoryMsg(ctx context.Context, in *GetChatHistoryMsgRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/GetChatHistoryMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PersonalLetter(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/PersonalLetter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteChatItem(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/user.service.v1.UserService/DeleteChatItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetCaptcha(context.Context, *CaptchaRequest) (*CommonDataResponse, error)
	Register(context.Context, *RegisterRequest) (*UserInfoResponse, error)
	Login(context.Context, *LoginRequest) (*UserInfoResponse, error)
	Forget(context.Context, *ForgetRequest) (*CommonDataResponse, error)
	TokenVerify(context.Context, *TokenRequest) (*TokenVerifyResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*TokenResponse, error)
	GetSpaceIndividual(context.Context, *SpaceIndividualRequest) (*CommonDataResponse, error)
	GetReleaseInformation(context.Context, *CommonIDRequest) (*CommonDataResponse, error)
	GetAttentionList(context.Context, *CommonIDRequest) (*CommonDataResponse, error)
	GetVermicelliList(context.Context, *CommonIDRequest) (*CommonDataResponse, error)
	GetUserInfo(context.Context, *CommonIDRequest) (*CommonDataResponse, error)
	SetUserInfo(context.Context, *UserInfoRequest) (*CommonBoolResponse, error)
	DetermineNameExists(context.Context, *DetermineNameExistsRequest) (*CommonBoolResponse, error)
	UpdateAvatar(context.Context, *UpdateAvatarRequest) (*CommonDataResponse, error)
	GetLiveData(context.Context, *CommonIDRequest) (*LiveDataResponse, error)
	SaveLiveData(context.Context, *SaveLiveDataRequest) (*CommonDataResponse, error)
	SendEmailVerificationCodeByChangePassword(context.Context, *CommonIDRequest) (*CommonDataResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*CommonDataResponse, error)
	Attention(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error)
	CreateFavorites(context.Context, *FavoritesRequest) (*CommonDataResponse, error)
	GetFavoritesList(context.Context, *CommonIDRequest) (*CommonDataResponse, error)
	DeleteFavorites(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error)
	FavoriteVideo(context.Context, *FavoriteVideoRequest) (*CommonDataResponse, error)
	GetFavoritesListByFavoriteVideo(context.Context, *FavoritesListRequest) (*CommonDataResponse, error)
	GetFavoriteVideoList(context.Context, *FavoriteVideoListRequest) (*CommonDataResponse, error)
	GetRecordList(context.Context, *GetRecordListRequest) (*CommonDataResponse, error)
	ClearRecord(context.Context, *CommonIDRequest) (*CommonDataResponse, error)
	DeleteRecordByID(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error)
	GetNoticeList(context.Context, *GetNoticeListRequest) (*CommonDataResponse, error)
	GetChatList(context.Context, *CommonIDRequest) (*CommonDataResponse, error)
	GetChatHistoryMsg(context.Context, *GetChatHistoryMsgRequest) (*CommonDataResponse, error)
	PersonalLetter(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error)
	DeleteChatItem(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetCaptcha(context.Context, *CaptchaRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaptcha not implemented")
}
func (UnimplementedUserServiceServer) Register(context.Context, *RegisterRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *LoginRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) Forget(context.Context, *ForgetRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forget not implemented")
}
func (UnimplementedUserServiceServer) TokenVerify(context.Context, *TokenRequest) (*TokenVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenVerify not implemented")
}
func (UnimplementedUserServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedUserServiceServer) GetSpaceIndividual(context.Context, *SpaceIndividualRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceIndividual not implemented")
}
func (UnimplementedUserServiceServer) GetReleaseInformation(context.Context, *CommonIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleaseInformation not implemented")
}
func (UnimplementedUserServiceServer) GetAttentionList(context.Context, *CommonIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttentionList not implemented")
}
func (UnimplementedUserServiceServer) GetVermicelliList(context.Context, *CommonIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVermicelliList not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfo(context.Context, *CommonIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServiceServer) SetUserInfo(context.Context, *UserInfoRequest) (*CommonBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserInfo not implemented")
}
func (UnimplementedUserServiceServer) DetermineNameExists(context.Context, *DetermineNameExistsRequest) (*CommonBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetermineNameExists not implemented")
}
func (UnimplementedUserServiceServer) UpdateAvatar(context.Context, *UpdateAvatarRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvatar not implemented")
}
func (UnimplementedUserServiceServer) GetLiveData(context.Context, *CommonIDRequest) (*LiveDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveData not implemented")
}
func (UnimplementedUserServiceServer) SaveLiveData(context.Context, *SaveLiveDataRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLiveData not implemented")
}
func (UnimplementedUserServiceServer) SendEmailVerificationCodeByChangePassword(context.Context, *CommonIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailVerificationCodeByChangePassword not implemented")
}
func (UnimplementedUserServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserServiceServer) Attention(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attention not implemented")
}
func (UnimplementedUserServiceServer) CreateFavorites(context.Context, *FavoritesRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFavorites not implemented")
}
func (UnimplementedUserServiceServer) GetFavoritesList(context.Context, *CommonIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoritesList not implemented")
}
func (UnimplementedUserServiceServer) DeleteFavorites(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFavorites not implemented")
}
func (UnimplementedUserServiceServer) FavoriteVideo(context.Context, *FavoriteVideoRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteVideo not implemented")
}
func (UnimplementedUserServiceServer) GetFavoritesListByFavoriteVideo(context.Context, *FavoritesListRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoritesListByFavoriteVideo not implemented")
}
func (UnimplementedUserServiceServer) GetFavoriteVideoList(context.Context, *FavoriteVideoListRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteVideoList not implemented")
}
func (UnimplementedUserServiceServer) GetRecordList(context.Context, *GetRecordListRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordList not implemented")
}
func (UnimplementedUserServiceServer) ClearRecord(context.Context, *CommonIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearRecord not implemented")
}
func (UnimplementedUserServiceServer) DeleteRecordByID(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecordByID not implemented")
}
func (UnimplementedUserServiceServer) GetNoticeList(context.Context, *GetNoticeListRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoticeList not implemented")
}
func (UnimplementedUserServiceServer) GetChatList(context.Context, *CommonIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatList not implemented")
}
func (UnimplementedUserServiceServer) GetChatHistoryMsg(context.Context, *GetChatHistoryMsgRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatHistoryMsg not implemented")
}
func (UnimplementedUserServiceServer) PersonalLetter(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonalLetter not implemented")
}
func (UnimplementedUserServiceServer) DeleteChatItem(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatItem not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetCaptcha(ctx, req.(*CaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Forget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Forget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/Forget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Forget(ctx, req.(*ForgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_TokenVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).TokenVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/TokenVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).TokenVerify(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSpaceIndividual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceIndividualRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSpaceIndividual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetSpaceIndividual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSpaceIndividual(ctx, req.(*SpaceIndividualRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetReleaseInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetReleaseInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetReleaseInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetReleaseInformation(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAttentionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAttentionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetAttentionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAttentionList(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetVermicelliList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetVermicelliList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetVermicelliList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetVermicelliList(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/SetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DetermineNameExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetermineNameExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DetermineNameExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/DetermineNameExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DetermineNameExists(ctx, req.(*DetermineNameExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/UpdateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateAvatar(ctx, req.(*UpdateAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetLiveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetLiveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetLiveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetLiveData(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SaveLiveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLiveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SaveLiveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/SaveLiveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SaveLiveData(ctx, req.(*SaveLiveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendEmailVerificationCodeByChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendEmailVerificationCodeByChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/SendEmailVerificationCodeByChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendEmailVerificationCodeByChangePassword(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Attention_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDAndUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Attention(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/Attention",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Attention(ctx, req.(*CommonIDAndUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/CreateFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateFavorites(ctx, req.(*FavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFavoritesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFavoritesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetFavoritesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFavoritesList(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDAndUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/DeleteFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteFavorites(ctx, req.(*CommonIDAndUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FavoriteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FavoriteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/FavoriteVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FavoriteVideo(ctx, req.(*FavoriteVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFavoritesListByFavoriteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFavoritesListByFavoriteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetFavoritesListByFavoriteVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFavoritesListByFavoriteVideo(ctx, req.(*FavoritesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFavoriteVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFavoriteVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetFavoriteVideoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFavoriteVideoList(ctx, req.(*FavoriteVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRecordList(ctx, req.(*GetRecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ClearRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ClearRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/ClearRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ClearRecord(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteRecordByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDAndUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteRecordByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/DeleteRecordByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteRecordByID(ctx, req.(*CommonIDAndUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetNoticeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoticeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetNoticeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetNoticeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetNoticeList(ctx, req.(*GetNoticeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetChatList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetChatList(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetChatHistoryMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatHistoryMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetChatHistoryMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/GetChatHistoryMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetChatHistoryMsg(ctx, req.(*GetChatHistoryMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PersonalLetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDAndUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PersonalLetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/PersonalLetter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PersonalLetter(ctx, req.(*CommonIDAndUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteChatItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDAndUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteChatItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.service.v1.UserService/DeleteChatItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteChatItem(ctx, req.(*CommonIDAndUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.service.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCaptcha",
			Handler:    _UserService_GetCaptcha_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "Forget",
			Handler:    _UserService_Forget_Handler,
		},
		{
			MethodName: "TokenVerify",
			Handler:    _UserService_TokenVerify_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _UserService_RefreshToken_Handler,
		},
		{
			MethodName: "GetSpaceIndividual",
			Handler:    _UserService_GetSpaceIndividual_Handler,
		},
		{
			MethodName: "GetReleaseInformation",
			Handler:    _UserService_GetReleaseInformation_Handler,
		},
		{
			MethodName: "GetAttentionList",
			Handler:    _UserService_GetAttentionList_Handler,
		},
		{
			MethodName: "GetVermicelliList",
			Handler:    _UserService_GetVermicelliList_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
		{
			MethodName: "SetUserInfo",
			Handler:    _UserService_SetUserInfo_Handler,
		},
		{
			MethodName: "DetermineNameExists",
			Handler:    _UserService_DetermineNameExists_Handler,
		},
		{
			MethodName: "UpdateAvatar",
			Handler:    _UserService_UpdateAvatar_Handler,
		},
		{
			MethodName: "GetLiveData",
			Handler:    _UserService_GetLiveData_Handler,
		},
		{
			MethodName: "SaveLiveData",
			Handler:    _UserService_SaveLiveData_Handler,
		},
		{
			MethodName: "SendEmailVerificationCodeByChangePassword",
			Handler:    _UserService_SendEmailVerificationCodeByChangePassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserService_ChangePassword_Handler,
		},
		{
			MethodName: "Attention",
			Handler:    _UserService_Attention_Handler,
		},
		{
			MethodName: "CreateFavorites",
			Handler:    _UserService_CreateFavorites_Handler,
		},
		{
			MethodName: "GetFavoritesList",
			Handler:    _UserService_GetFavoritesList_Handler,
		},
		{
			MethodName: "DeleteFavorites",
			Handler:    _UserService_DeleteFavorites_Handler,
		},
		{
			MethodName: "FavoriteVideo",
			Handler:    _UserService_FavoriteVideo_Handler,
		},
		{
			MethodName: "GetFavoritesListByFavoriteVideo",
			Handler:    _UserService_GetFavoritesListByFavoriteVideo_Handler,
		},
		{
			MethodName: "GetFavoriteVideoList",
			Handler:    _UserService_GetFavoriteVideoList_Handler,
		},
		{
			MethodName: "GetRecordList",
			Handler:    _UserService_GetRecordList_Handler,
		},
		{
			MethodName: "ClearRecord",
			Handler:    _UserService_ClearRecord_Handler,
		},
		{
			MethodName: "DeleteRecordByID",
			Handler:    _UserService_DeleteRecordByID_Handler,
		},
		{
			MethodName: "GetNoticeList",
			Handler:    _UserService_GetNoticeList_Handler,
		},
		{
			MethodName: "GetChatList",
			Handler:    _UserService_GetChatList_Handler,
		},
		{
			MethodName: "GetChatHistoryMsg",
			Handler:    _UserService_GetChatHistoryMsg_Handler,
		},
		{
			MethodName: "PersonalLetter",
			Handler:    _UserService_PersonalLetter_Handler,
		},
		{
			MethodName: "DeleteChatItem",
			Handler:    _UserService_DeleteChatItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service.proto",
}
