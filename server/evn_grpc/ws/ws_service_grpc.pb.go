// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: ws_service.proto

package ws

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WsServiceClient is the client API for WsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WsServiceClient interface {
	GetChatList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
}

type wsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWsServiceClient(cc grpc.ClientConnInterface) WsServiceClient {
	return &wsServiceClient{cc}
}

func (c *wsServiceClient) GetChatList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/ws.service.v1.WsService/GetChatList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WsServiceServer is the server API for WsService service.
// All implementations must embed UnimplementedWsServiceServer
// for forward compatibility
type WsServiceServer interface {
	GetChatList(context.Context, *CommonIDRequest) (*CommonDataResponse, error)
	mustEmbedUnimplementedWsServiceServer()
}

// UnimplementedWsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWsServiceServer struct {
}

func (UnimplementedWsServiceServer) GetChatList(context.Context, *CommonIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatList not implemented")
}
func (UnimplementedWsServiceServer) mustEmbedUnimplementedWsServiceServer() {}

// UnsafeWsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WsServiceServer will
// result in compilation errors.
type UnsafeWsServiceServer interface {
	mustEmbedUnimplementedWsServiceServer()
}

func RegisterWsServiceServer(s grpc.ServiceRegistrar, srv WsServiceServer) {
	s.RegisterService(&WsService_ServiceDesc, srv)
}

func _WsService_GetChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WsServiceServer).GetChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ws.service.v1.WsService/GetChatList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WsServiceServer).GetChatList(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WsService_ServiceDesc is the grpc.ServiceDesc for WsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ws.service.v1.WsService",
	HandlerType: (*WsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatList",
			Handler:    _WsService_GetChatList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ws_service.proto",
}
