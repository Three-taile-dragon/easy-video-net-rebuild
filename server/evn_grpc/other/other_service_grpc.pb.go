// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: other_service.proto

package other

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OtherServiceClient is the client API for OtherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtherServiceClient interface {
	GetHomeInfo(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*HomeResponse, error)
	GetLiveRoom(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*GetLiveRoomResponse, error)
	GetLiveRoomInfo(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetBeLiveList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
}

type otherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOtherServiceClient(cc grpc.ClientConnInterface) OtherServiceClient {
	return &otherServiceClient{cc}
}

func (c *otherServiceClient) GetHomeInfo(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*HomeResponse, error) {
	out := new(HomeResponse)
	err := c.cc.Invoke(ctx, "/other.service.v1.OtherService/GetHomeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otherServiceClient) GetLiveRoom(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*GetLiveRoomResponse, error) {
	out := new(GetLiveRoomResponse)
	err := c.cc.Invoke(ctx, "/other.service.v1.OtherService/GetLiveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otherServiceClient) GetLiveRoomInfo(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/other.service.v1.OtherService/GetLiveRoomInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otherServiceClient) GetBeLiveList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/other.service.v1.OtherService/GetBeLiveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtherServiceServer is the server API for OtherService service.
// All implementations must embed UnimplementedOtherServiceServer
// for forward compatibility
type OtherServiceServer interface {
	GetHomeInfo(context.Context, *HomeRequest) (*HomeResponse, error)
	GetLiveRoom(context.Context, *CommonIDRequest) (*GetLiveRoomResponse, error)
	GetLiveRoomInfo(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error)
	GetBeLiveList(context.Context, *CommonIDRequest) (*CommonDataResponse, error)
	mustEmbedUnimplementedOtherServiceServer()
}

// UnimplementedOtherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOtherServiceServer struct {
}

func (UnimplementedOtherServiceServer) GetHomeInfo(context.Context, *HomeRequest) (*HomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeInfo not implemented")
}
func (UnimplementedOtherServiceServer) GetLiveRoom(context.Context, *CommonIDRequest) (*GetLiveRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveRoom not implemented")
}
func (UnimplementedOtherServiceServer) GetLiveRoomInfo(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveRoomInfo not implemented")
}
func (UnimplementedOtherServiceServer) GetBeLiveList(context.Context, *CommonIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeLiveList not implemented")
}
func (UnimplementedOtherServiceServer) mustEmbedUnimplementedOtherServiceServer() {}

// UnsafeOtherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtherServiceServer will
// result in compilation errors.
type UnsafeOtherServiceServer interface {
	mustEmbedUnimplementedOtherServiceServer()
}

func RegisterOtherServiceServer(s grpc.ServiceRegistrar, srv OtherServiceServer) {
	s.RegisterService(&OtherService_ServiceDesc, srv)
}

func _OtherService_GetHomeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtherServiceServer).GetHomeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/other.service.v1.OtherService/GetHomeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtherServiceServer).GetHomeInfo(ctx, req.(*HomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtherService_GetLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtherServiceServer).GetLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/other.service.v1.OtherService/GetLiveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtherServiceServer).GetLiveRoom(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtherService_GetLiveRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDAndUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtherServiceServer).GetLiveRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/other.service.v1.OtherService/GetLiveRoomInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtherServiceServer).GetLiveRoomInfo(ctx, req.(*CommonIDAndUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtherService_GetBeLiveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtherServiceServer).GetBeLiveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/other.service.v1.OtherService/GetBeLiveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtherServiceServer).GetBeLiveList(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OtherService_ServiceDesc is the grpc.ServiceDesc for OtherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OtherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "other.service.v1.OtherService",
	HandlerType: (*OtherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHomeInfo",
			Handler:    _OtherService_GetHomeInfo_Handler,
		},
		{
			MethodName: "GetLiveRoom",
			Handler:    _OtherService_GetLiveRoom_Handler,
		},
		{
			MethodName: "GetLiveRoomInfo",
			Handler:    _OtherService_GetLiveRoomInfo_Handler,
		},
		{
			MethodName: "GetBeLiveList",
			Handler:    _OtherService_GetBeLiveList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "other_service.proto",
}
