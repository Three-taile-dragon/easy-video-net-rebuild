// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: video_service.proto

package video

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	GetVideoBarrage(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetVideoBarrageList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetVideoComment(ctx context.Context, in *GetVideoCommentRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetVideoContributionByID(ctx context.Context, in *GetVideoContributionByIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	SendVideoBarrage(ctx context.Context, in *SendVideoBarrageRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	CreateVideoContribution(ctx context.Context, in *CreateVideoContributionRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	UpdateVideoContribution(ctx context.Context, in *UpdateVideoContributionRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	DeleteVideoByID(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	VideoPostComment(ctx context.Context, in *VideoPostCommentRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	GetVideoManagementList(ctx context.Context, in *GetVideoManagementListRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
	LikeVideo(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) GetVideoBarrage(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/video.service.v1.VideoService/GetVideoBarrage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoBarrageList(ctx context.Context, in *CommonIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/video.service.v1.VideoService/GetVideoBarrageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoComment(ctx context.Context, in *GetVideoCommentRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/video.service.v1.VideoService/GetVideoComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoContributionByID(ctx context.Context, in *GetVideoContributionByIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/video.service.v1.VideoService/GetVideoContributionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) SendVideoBarrage(ctx context.Context, in *SendVideoBarrageRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/video.service.v1.VideoService/SendVideoBarrage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) CreateVideoContribution(ctx context.Context, in *CreateVideoContributionRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/video.service.v1.VideoService/CreateVideoContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) UpdateVideoContribution(ctx context.Context, in *UpdateVideoContributionRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/video.service.v1.VideoService/UpdateVideoContribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) DeleteVideoByID(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/video.service.v1.VideoService/DeleteVideoByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) VideoPostComment(ctx context.Context, in *VideoPostCommentRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/video.service.v1.VideoService/VideoPostComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideoManagementList(ctx context.Context, in *GetVideoManagementListRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/video.service.v1.VideoService/GetVideoManagementList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) LikeVideo(ctx context.Context, in *CommonIDAndUIDRequest, opts ...grpc.CallOption) (*CommonDataResponse, error) {
	out := new(CommonDataResponse)
	err := c.cc.Invoke(ctx, "/video.service.v1.VideoService/LikeVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	GetVideoBarrage(context.Context, *CommonIDRequest) (*CommonDataResponse, error)
	GetVideoBarrageList(context.Context, *CommonIDRequest) (*CommonDataResponse, error)
	GetVideoComment(context.Context, *GetVideoCommentRequest) (*CommonDataResponse, error)
	GetVideoContributionByID(context.Context, *GetVideoContributionByIDRequest) (*CommonDataResponse, error)
	SendVideoBarrage(context.Context, *SendVideoBarrageRequest) (*CommonDataResponse, error)
	CreateVideoContribution(context.Context, *CreateVideoContributionRequest) (*CommonDataResponse, error)
	UpdateVideoContribution(context.Context, *UpdateVideoContributionRequest) (*CommonDataResponse, error)
	DeleteVideoByID(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error)
	VideoPostComment(context.Context, *VideoPostCommentRequest) (*CommonDataResponse, error)
	GetVideoManagementList(context.Context, *GetVideoManagementListRequest) (*CommonDataResponse, error)
	LikeVideo(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error)
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) GetVideoBarrage(context.Context, *CommonIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoBarrage not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoBarrageList(context.Context, *CommonIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoBarrageList not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoComment(context.Context, *GetVideoCommentRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoComment not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoContributionByID(context.Context, *GetVideoContributionByIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoContributionByID not implemented")
}
func (UnimplementedVideoServiceServer) SendVideoBarrage(context.Context, *SendVideoBarrageRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVideoBarrage not implemented")
}
func (UnimplementedVideoServiceServer) CreateVideoContribution(context.Context, *CreateVideoContributionRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideoContribution not implemented")
}
func (UnimplementedVideoServiceServer) UpdateVideoContribution(context.Context, *UpdateVideoContributionRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoContribution not implemented")
}
func (UnimplementedVideoServiceServer) DeleteVideoByID(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideoByID not implemented")
}
func (UnimplementedVideoServiceServer) VideoPostComment(context.Context, *VideoPostCommentRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoPostComment not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoManagementList(context.Context, *GetVideoManagementListRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoManagementList not implemented")
}
func (UnimplementedVideoServiceServer) LikeVideo(context.Context, *CommonIDAndUIDRequest) (*CommonDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeVideo not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_GetVideoBarrage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoBarrage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.service.v1.VideoService/GetVideoBarrage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoBarrage(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoBarrageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoBarrageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.service.v1.VideoService/GetVideoBarrageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoBarrageList(ctx, req.(*CommonIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.service.v1.VideoService/GetVideoComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoComment(ctx, req.(*GetVideoCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoContributionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoContributionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoContributionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.service.v1.VideoService/GetVideoContributionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoContributionByID(ctx, req.(*GetVideoContributionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_SendVideoBarrage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVideoBarrageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).SendVideoBarrage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.service.v1.VideoService/SendVideoBarrage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).SendVideoBarrage(ctx, req.(*SendVideoBarrageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_CreateVideoContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).CreateVideoContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.service.v1.VideoService/CreateVideoContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).CreateVideoContribution(ctx, req.(*CreateVideoContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_UpdateVideoContribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoContributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).UpdateVideoContribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.service.v1.VideoService/UpdateVideoContribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).UpdateVideoContribution(ctx, req.(*UpdateVideoContributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_DeleteVideoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDAndUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).DeleteVideoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.service.v1.VideoService/DeleteVideoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).DeleteVideoByID(ctx, req.(*CommonIDAndUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_VideoPostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoPostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).VideoPostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.service.v1.VideoService/VideoPostComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).VideoPostComment(ctx, req.(*VideoPostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideoManagementList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoManagementListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoManagementList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.service.v1.VideoService/GetVideoManagementList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoManagementList(ctx, req.(*GetVideoManagementListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_LikeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonIDAndUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).LikeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.service.v1.VideoService/LikeVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).LikeVideo(ctx, req.(*CommonIDAndUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.service.v1.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoBarrage",
			Handler:    _VideoService_GetVideoBarrage_Handler,
		},
		{
			MethodName: "GetVideoBarrageList",
			Handler:    _VideoService_GetVideoBarrageList_Handler,
		},
		{
			MethodName: "GetVideoComment",
			Handler:    _VideoService_GetVideoComment_Handler,
		},
		{
			MethodName: "GetVideoContributionByID",
			Handler:    _VideoService_GetVideoContributionByID_Handler,
		},
		{
			MethodName: "SendVideoBarrage",
			Handler:    _VideoService_SendVideoBarrage_Handler,
		},
		{
			MethodName: "CreateVideoContribution",
			Handler:    _VideoService_CreateVideoContribution_Handler,
		},
		{
			MethodName: "UpdateVideoContribution",
			Handler:    _VideoService_UpdateVideoContribution_Handler,
		},
		{
			MethodName: "DeleteVideoByID",
			Handler:    _VideoService_DeleteVideoByID_Handler,
		},
		{
			MethodName: "VideoPostComment",
			Handler:    _VideoService_VideoPostComment_Handler,
		},
		{
			MethodName: "GetVideoManagementList",
			Handler:    _VideoService_GetVideoManagementList_Handler,
		},
		{
			MethodName: "LikeVideo",
			Handler:    _VideoService_LikeVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video_service.proto",
}
